/*This file we have created so that we can put all code of listings route here. */

const express = require('express');
const router = express.Router(); // Creting new router object.
const wrapAsync = require('../utils/wrapAsync.js');
const Listing = require('../models/listing.js');
const { isLoggedIn, isOwner, validateListing } = require('../middleware.js');
const listingController = require("../controllers/listing.js");// We have required this because, due to MVC we have shifted 
                                                               // all the the code of asynchronous callback of routes of 
                                                               // listing in "controllers -> listing.js" file.
const multer = require('multer');
const { storage } = require('../CloudConfig.js');
const upload = multer({ storage });// This line will initialize multer and will have destination within a function
                                   // in which we will tell that where we will save the form data / file.
                                   // We have written storage so that multer by-default save the file to cloud storage.



// commenting ExpressError and listingSchema because, we have sfifted the code of validateListing to midlleware.js file. 
// So, here it is of no use now.
// const ExpressError = require('../utils/ExpressError.js');
// const { listingSchema } = require('../schema.js'); // requiring validate listingSchema and reviewSchema from schema.js
// for server-side validation of listings and reviews.


// day51file8 -> we are shifting the validateListing code to middleware.js for making a middleware for it.
// day45file8-> We will make a function validate listing 
// We will use "Joi" i.e. an npm package for defining server side schema.
// For that we have made file schema.js
// const validateListing= (req, res, next)=>{
//     let {error} = listingSchema.validate(req.body);
//     console.log(error);
//     if(error)
//         {
//             let errMsg = error.details.map((element) => element.message).join(",");
//             throw new ExpressError(404, errMsg); // Throwing error generated by Joi.
//         }
//         else
//         {
//             next();
//         }
// };

//We will write Index route and Create route together usimg router.route because, they both are having same path:- '/'.
router
    .route('/')    
    /*Index Route*/
    .get(wrapAsync(listingController.index))
    /*Create Route */
    .post(
        isLoggedIn, // why we have written "isLoggedIn" middleware here, is written in "NewRoute" above.
        upload.single('listing[image][url]'),// About, upload.single(''), We have written below.
        validateListing, //passing validateListing function defined above.
        wrapAsync(listingController.createListing)
    );
    // .post( upload.single('listing[image][url]'), (req, res) => {// Here, we are using a middleware "upload.single" that will 
                                                          // save our file. upload.single('') means we want to save single file.
                                                          // and within brackets we put from which field we want to access our file.
    //     res.send(req.file);// Here, we are accessing req.file because file object has all file related data.
    // });


/*New Route */
// Note:- code of New Route will be above of Show Route or any route that is having "/:id" in it's link because, express will 
// consider the "/new" as "/id" and will give error.
router.get(
    '/new', 
    isLoggedIn, // Here we passed the "isLoggedIn" middleware whose code previously we have directlly written just below 
                // but we have now shifted it to a new file middleware.js file from where we have required it above.
                // And it is there to check the authentication of the user.
    wrapAsync(listingController.renderNewForm)
);

 
// We will write Show route, Edit route and delete route together usimg router.route because, they all are having same 
// path:- '/:id'.
router
    .route('/:id')
    /*Show Route*/
    .get(wrapAsync(listingController.showListing))   
    /*Update Route*/ 
    .put(
        isLoggedIn, // isLoggedIn is a middleware defined in the middleware.js file which will check that the user is logged in or not.
        isOwner, // isOwner is a middleware defined in the middleware.js file which will check that the user is the owner of 
                 // the listing or not for which he/she is wanting the edit access.
        upload.single('listing[image][url]'),
        validateListing, //passing validateListing middleware function defined in  middleware.js file.
        wrapAsync(listingController.updateListing)
    )        
    /*Delete Route*/
    .delete(
        isLoggedIn, // why we have written "isLoggedIn" middleware here, is written in "NewRoute" above.
        isOwner, // why we have written "isOwner" middleware here, is written in "updateRoute" above.
        wrapAsync(listingController.destroyListing)
    );

/*Edit Route*/
router.get(
    "/:id/edit", 
    isLoggedIn, // why we have written "isLoggedIn" middleware here, is written in "NewRoute" above.
    isOwner, // why we have written "isOwner" middleware here, is written in "updateRoute" below.
    wrapAsync(listingController.renderEditForm)
);

module.exports = router;